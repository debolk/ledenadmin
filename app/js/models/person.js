// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Bolk.Person = (function(_super) {
    __extends(Person, _super);

    function Person(data) {
      var regex;

      Person.__super__.constructor.call(this, data);
      regex = new RegExp('"', 'g');
      this.index = JSON.stringify(data);
      this.index = this.index.replace(regex, '');
      this.index = this.index.toLowerCase();
    }

    Person.prototype.matches = function(filter) {
      return this.index.indexOf(filter) !== -1;
    };

    Person.prototype.merge_operculum = function(finish) {
      var model, operculum;

      if (finish == null) {
        finish = function() {
          return {};
        };
      }
      if (this.complete) {
        finish();
        return;
      }
      operculum = new Bolk.OperculumRequest("person/" + this.attributes.uid);
      model = this;
      operculum.request.done(function(data) {
        model.set(data);
        model.complete = true;
        locache.async.set('member-page-' + model.attributes.uid, model.attributes);
        return finish();
      });
      return operculum.request.fail(function() {
        model.complete = true;
        return finish();
      });
    };

    Person.prototype.to_csv = function() {
      var escaped, first, key, line, r, value, _ref;

      line = "";
      first = true;
      r = new RegExp('"', 'g');
      _ref = this.attributes;
      for (key in _ref) {
        value = _ref[key];
        value = value != null ? value : "";
        escaped = value;
        if (typeof escaped === 'string') {
          escaped = escaped.replace(r, '""');
        }
        if (!first) {
          line += ',';
        }
        first = false;
        if (escaped) {
          line += '"' + escaped + '"';
        }
      }
      return line;
    };

    Person.prototype.defaults = {
      uid: '',
      nickname: '',
      study: '',
      alive: true,
      inauguration: null,
      resignation_letter: null,
      resignation: null,
      initials: '',
      firstname: '',
      lastname: '',
      email: '',
      gender: '',
      phone: '',
      mobile: '',
      phone_parents: '',
      address: '',
      dateofbirth: ''
    };

    return Person;

  })(Backbone.Model);

}).call(this);
