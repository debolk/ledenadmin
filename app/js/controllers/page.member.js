// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Bolk.MemberPageController = (function(_super) {

    __extends(MemberPageController, _super);

    MemberPageController.CacheTime = 120;

    function MemberPageController(uid, succes) {
      var _this = this;
      this.uid = uid;
      MemberPageController.__super__.constructor.call(this, new Bolk.MemberPage('member-' + this.uid, this.uid));
      this.view.el.submit(function(event) {
        event.preventDefault();
        _this.saveMember(_this.view.el.serializeObject());
        return false;
      });
      if (succes) {
        this.view.showSuccess("Aanmaken gelukt");
      }
      locache.async.get('member-page-' + this.uid).finished(function(data) {
        if (!data) {
          return _this._fetchMember();
        } else {
          return _this._parseMember(data);
        }
      });
      $('input#search-field').prop('disabled', true);
    }

    MemberPageController.prototype._fetchMember = function(display) {
      var blip,
        _this = this;
      if (display == null) {
        display = true;
      }
      blip = new Bolk.BlipRequest("persons/" + this.uid);
      blip.request.done(function(blipdata) {
        var operculum;
        if (typeof blipdata === String) {
          blipdata = JSON.parse(blipdata);
        }
        operculum = new Bolk.OperculumRequest("person/" + _this.uid);
        return operculum.request.always(function(operculumdata) {
          var data;
          if ((operculumdata.error != null) && (operculumdata.statusText != null) && operculumdata === "error") {
            operculumdata = {};
          }
          if (typeof operculumdata === String) {
            operculumdata = JSON.parse(operculumdata);
          }
          data = _.extend(operculumdata, blipdata, {
            complete: true
          });
          locache.async.set('member-page-' + _this.uid, data, MemberPageController.CacheTime);
          if (display) {
            return _this._parseMember(data);
          }
        });
      });
      return this;
    };

    MemberPageController.prototype._createSaveBlipMemberRequest = function(data) {
      var blip, blipdata;
      blipdata = JSON.stringify(data['input']['blip']);
      blip = new Bolk.BlipRequest("persons/" + this.uid, blipdata, 'PATCH');
      console.debug(blipdata);
      return blip;
    };

    MemberPageController.prototype._createSaveOperculumMemberRequest = function(data) {
      var oper, operdata;
      operdata = data['input']['operculum'];
      operdata['uid'] = this.uid;
      operdata['alive'] = operdata['alive'] === "true";
      operdata = JSON.stringify(operdata);
      oper = new Bolk.OperculumRequest("person/" + this.uid, operdata, 'PUT');
      console.debug(operdata);
      return oper;
    };

    MemberPageController.prototype.saveMember = function(data) {
      var blip, onDone, oper, progress,
        _this = this;
      this.view.clearErrors();
      progress = 0;
      onDone = (function() {
        _this._fetchMember(false);
        if (++progress === 2) {
          return _this.view.showSuccess("Opslaan gelukt");
        }
      });
      blip = this._createSaveBlipMemberRequest(data);
      blip.request.done(onDone);
      blip.request.fail(function(error) {
        console.error(error);
        return _this.view.showError(error.responseText);
      });
      oper = this._createSaveOperculumMemberRequest(data);
      oper.request.done(onDone);
      return oper.request.fail(function(error) {
        var errors, message, _i, _len, _results;
        errors = error.responseJSON.error_description;
        console.log(errors);
        _results = [];
        for (_i = 0, _len = errors.length; _i < _len; _i++) {
          message = errors[_i];
          _results.push(_this.view.showError(message));
        }
        return _results;
      });
    };

    MemberPageController.prototype._parseMember = function(data) {
      this.model = new Bolk.Person(data);
      this.view.display(this.model);
      return this;
    };

    return MemberPageController;

  })(Bolk.PageController);

}).call(this);
