// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Bolk.MembersPageController = (function(_super) {

    __extends(MembersPageController, _super);

    MembersPageController.CacheTime = 120;

    function MembersPageController(filter) {
      var _ref,
        _this = this;
      this.filter = filter;
      MembersPageController.__super__.constructor.call(this, new Bolk.MembersPage(this._titlefor(this.filter)));
      this.query = (_ref = window.search_query) != null ? _ref : "membership:lid";
      locache.async.get('members-page').finished(function(data) {
        if (!data) {
          return _this._fetchMembers();
        } else {
          return _this._parseMembers(data);
        }
      });
      this._bindSearch();
      this._createExport();
    }

    MembersPageController.prototype._bindSearch = function() {
      var _this = this;
      this.search = $('#search-field');
      this.search.val(this.query);
      this.search.keyup(_.debounce(function() {
        var filter;
        filter = _this.search.val().toLowerCase();
        window.search_query = filter;
        return _this._filter(filter);
      }, 400));
      return $('#search').submit(function(event) {
        var model, _ref;
        event.preventDefault();
        model = (_ref = _this.selection) != null ? _ref[0] : void 0;
        if (model != null) {
          document.router.navigate("//member/" + model.attributes.uid, {
            trigger: true
          });
        }
        return false;
      });
    };

    MembersPageController.prototype._createExport = function() {
      var _this = this;
      this.exporter = $('<a>export</a>');
      $('.actions').append(' | ');
      $('.actions').append(this.exporter);
      return this.exporter.click(function() {
        var action, actions, model, _i, _len, _ref;
        if (_this.selection.length === 0) {
          return;
        }
        _this.showLoader();
        actions = [];
        _ref = _this.selection;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          model = _ref[_i];
          action = model.merge_operculum();
          if (action != null) {
            actions.push(action);
          }
        }
        return $.when.apply($, actions).then(function() {
          var data, headers, key, person, result, value, _j, _len1, _ref1, _ref2;
          headers = [];
          _ref1 = _this.selection[0].attributes;
          for (key in _ref1) {
            value = _ref1[key];
            headers.push(key);
          }
          result = headers.join(',') + "\n";
          _ref2 = _this.selection;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            person = _ref2[_j];
            result += person.to_csv() + "\n";
          }
          _this.hideLoader();
          data = 'data:text/csv,' + encodeURIComponent(result);
          return window.location = data;
        }, function() {
          return console.error(arguments);
        });
      });
    };

    MembersPageController.prototype._filter = function(query) {
      var branch, branches, leaf, part, person, tree, _i, _j, _len, _len1, _ref;
      this.query = query;
      this.selection = [];
      if (this.query.length < 3) {
        this.query = "";
        this.selection = this.model;
        this.view.display(this.model);
        this.showAllPersons();
        return this;
      }
      this.hideAllPersons();
      branches = this.query.split(' and ');
      tree = [];
      branches = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = branches.length; _i < _len; _i++) {
          part = branches[_i];
          if (part.trim().length !== 0) {
            _results.push(part);
          }
        }
        return _results;
      })();
      for (_i = 0, _len = branches.length; _i < _len; _i++) {
        branch = branches[_i];
        tree.push((function() {
          var _j, _len1, _ref, _results;
          _ref = branch.split(' or ');
          _results = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            leaf = _ref[_j];
            if (leaf.trim().length !== 0) {
              _results.push(leaf.trim().split(' '));
            }
          }
          return _results;
        })());
      }
      _ref = this.model.models;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        person = _ref[_j];
        if (!(person.matches(tree))) {
          continue;
        }
        this.selection.push(person);
        this.showPerson(person.get('uid'));
      }
      return this;
    };

    MembersPageController.prototype.showAllPersons = function() {
      $('.members').children().css('display', 'inline-block');
      return this;
    };

    MembersPageController.prototype.hideAllPersons = function() {
      $('.members').children().css('display', 'none');
      return this;
    };

    MembersPageController.prototype.hidePerson = function(uid) {
      $("#person-" + uid).css('display', 'none');
      return this;
    };

    MembersPageController.prototype.showPerson = function(uid) {
      $("#person-" + uid).css('display', 'inline-block');
      return this;
    };

    MembersPageController.prototype._fetchMembers = function() {
      var blip,
        _this = this;
      this.showLoader();
      blip = new Bolk.BlipRequest('persons');
      return blip.request.always(function(data) {
        _this.hideLoader();
        if (blip.result) {
          data = blip.result;
          if (typeof data === String) {
            data = JSON.parse(data);
          }
          locache.async.set('members-page', data, MembersPageController.CacheTime);
          return _this._parseMembers(data);
        }
      });
    };

    MembersPageController.prototype._parseMembers = function(data) {
      var person, _i, _len;
      this.model = new Bolk.Persons();
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        person = data[_i];
        person = new Bolk.Person(_.extend(person, {
          complete: false
        }));
        this.model.add(person);
      }
      this.view.display(this.model);
      return this._filter(this.query);
    };

    MembersPageController.prototype._titlefor = function(filter) {
      switch (filter) {
        case 'kandidaat':
          return 'Kandidaatleden';
        case 'oud':
          return 'Oud-leden';
        case 'actief':
          return 'Ledenlijst';
        default:
          return 'Ledenlijst';
      }
    };

    return MembersPageController;

  })(Bolk.PageController);

}).call(this);
